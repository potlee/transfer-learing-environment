{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import nn\n",
    "import torchvision\n",
    "import torch.optim as optim\n",
    "from torchvision import transforms\n",
    "from torch.utils.data import DataLoader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n"
     ]
    }
   ],
   "source": [
    "tr = transforms.Compose([\n",
    "    transforms.Resize((32,32)),\n",
    "    transforms.ToTensor(),\n",
    "])\n",
    "\n",
    "vgg = torchvision.models.vgg16(pretrained=True, num_classes=1000)\n",
    "cifar_train = torchvision.datasets.cifar.CIFAR10('./cifar', download=True, transform=tr, train=True)\n",
    "cifar_test = torchvision.datasets.cifar.CIFAR10('./cifar', download=True, transform=tr, train=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "vgg.classifier = nn.Linear(in_features=2048, out_features=10, bias=True)\n",
    "\n",
    "vgg = vgg.cuda()\n",
    "criterion = torch.nn.CrossEntropyLoss()\n",
    "feature_optimizer = optim.Adam(vgg.features.parameters())\n",
    "clasifier_optimizer = optim.Adam(vgg.classifier.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".\n",
      "batch accuracy:  13.0\n",
      "test accuracy:  10.0\n",
      "batch loss:  2.3100101947784424\n",
      "Test loss:  2.3799939155578613\n",
      ".....\n",
      "batch accuracy:  38.0\n",
      "test accuracy:  29.0\n",
      "batch loss:  1.9410357475280762\n",
      "Test loss:  1.9850550889968872\n",
      ".....\n",
      "batch accuracy:  54.0\n",
      "test accuracy:  52.0\n",
      "batch loss:  1.620125412940979\n",
      "Test loss:  1.6822336912155151\n",
      ".....\n",
      "batch accuracy:  48.0\n",
      "test accuracy:  46.0\n",
      "batch loss:  1.560060739517212\n",
      "Test loss:  1.5456047058105469\n",
      ".....\n",
      "batch accuracy:  58.0\n",
      "test accuracy:  59.0\n",
      "batch loss:  1.4378772974014282\n",
      "Test loss:  1.4527342319488525\n",
      ".....\n",
      "batch accuracy:  51.0\n",
      "test accuracy:  55.0\n",
      "batch loss:  1.3879637718200684\n",
      "Test loss:  1.3939905166625977\n",
      ".....\n",
      "batch accuracy:  62.0\n",
      "test accuracy:  60.0\n",
      "batch loss:  1.2887760400772095\n",
      "Test loss:  1.2617355585098267\n",
      ".....\n",
      "batch accuracy:  64.0\n",
      "test accuracy:  51.0\n",
      "batch loss:  1.212748646736145\n",
      "Test loss:  1.3460551500320435\n",
      ".....\n",
      "batch accuracy:  50.0\n",
      "test accuracy:  53.0\n",
      "batch loss:  1.2800700664520264\n",
      "Test loss:  1.2757302522659302\n",
      ".....\n",
      "batch accuracy:  58.0\n",
      "test accuracy:  63.0\n",
      "batch loss:  1.308668613433838\n",
      "Test loss:  1.1417840719223022\n",
      ".....\n",
      "batch accuracy:  59.0\n",
      "test accuracy:  60.0\n",
      "batch loss:  1.146904468536377\n",
      "Test loss:  1.2123974561691284\n",
      ".....\n",
      "batch accuracy:  57.0\n",
      "test accuracy:  59.0\n",
      "batch loss:  1.249733328819275\n",
      "Test loss:  1.2885829210281372\n",
      ".....\n",
      "batch accuracy:  56.0\n",
      "test accuracy:  58.0\n",
      "batch loss:  1.2164504528045654\n",
      "Test loss:  1.3189239501953125\n",
      ".....\n",
      "batch accuracy:  61.0\n",
      "test accuracy:  55.0\n",
      "batch loss:  1.1593472957611084\n",
      "Test loss:  1.282768964767456\n",
      ".....\n",
      "batch accuracy:  66.0\n",
      "test accuracy:  54.0\n",
      "batch loss:  1.0402555465698242\n",
      "Test loss:  1.2163441181182861\n",
      ".....\n",
      "batch accuracy:  60.0\n",
      "test accuracy:  59.0\n",
      "batch loss:  1.1021531820297241\n",
      "Test loss:  1.198064923286438\n",
      ".....\n",
      "batch accuracy:  68.0\n",
      "test accuracy:  59.0\n",
      "batch loss:  1.1112068891525269\n",
      "Test loss:  1.2708569765090942\n",
      ".....\n",
      "batch accuracy:  64.0\n",
      "test accuracy:  65.0\n",
      "batch loss:  0.9645946025848389\n",
      "Test loss:  1.057827115058899\n",
      ".....\n",
      "batch accuracy:  66.0\n",
      "test accuracy:  65.0\n",
      "batch loss:  1.041440725326538\n",
      "Test loss:  1.0681464672088623\n",
      ".....\n",
      "batch accuracy:  64.0\n",
      "test accuracy:  70.0\n",
      "batch loss:  1.1496009826660156\n",
      "Test loss:  0.9898698925971985\n",
      ".....\n",
      "batch accuracy:  59.0\n",
      "test accuracy:  77.0\n",
      "batch loss:  1.1955063343048096\n",
      "Test loss:  0.9096807837486267\n"
     ]
    }
   ],
   "source": [
    "dl_train = DataLoader(cifar_train, batch_size=100, shuffle=True, num_workers=1)\n",
    "dl_test = DataLoader(cifar_test, batch_size=100, shuffle=True, num_workers=1)\n",
    "\n",
    "for epoch, (x,y) in enumerate(dl_train):\n",
    "    print('.', end='')\n",
    "    x, y = x.cuda(), y.cuda()    \n",
    "    clasifier_optimizer.zero_grad()\n",
    "    \n",
    "    y_pred = vgg(x)\n",
    "    loss = criterion(y_pred, y)\n",
    "   \n",
    "    if epoch % 5 == 0:\n",
    "        print('')\n",
    "        \n",
    "        test = next(enumerate(dl_test))[1]\n",
    "        y_test = test[1].cuda()\n",
    "        x_test = test[0].cuda()\n",
    "        y_pred_test = vgg(x_test)\n",
    "\n",
    "        _, argmax = y_pred.max(1)\n",
    "        _, argmax_test = y_pred_test.max(1)\n",
    "        \n",
    "        loss_test = criterion(y_pred_test, y_test)\n",
    "        \n",
    "        print('batch accuracy: ', float((argmax == y).sum()))\n",
    "        print('test accuracy: ', float((argmax_test == y_test).sum()))\n",
    "        print('batch loss: ', float(loss))\n",
    "        print('Test loss: ', float(loss_test))\n",
    "    \n",
    "    loss.backward()\n",
    "    clasifier_optimizer.step()\n",
    "    \n",
    "    if epoch == 100:\n",
    "        break\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
